tmate.yml:

name: hopingboyz

on:
schedule:
- cron: '0 */5 * * *' # Runs every 5 hours
workflow_dispatch:

jobs:
vps-session:
runs-on: ubuntu-latest
timeout-minutes: 300 # 5 hours

steps:
- name: Checkout repo (test)
uses: actions/checkout@v4

- name: Set hostname
run: sudo hostnamectl set-hostname hopingboyz

- name: Install basic dependencies
run: |
sudo apt update
sudo apt install -y tmate curl unzip sudo net-tools neofetch

- name: Restore latest repo backup
run: |
if [ -f backups/latest.zip ]; then
unzip -o backups/latest.zip -d /
echo ":white_check_mark: Backup restored from repository"
else
echo ":warning: No backup found in the repository!"
fi

- name: Create user hopingboyz
run: |
if ! id -u hopingboyz >/dev/null 2>&1; then
sudo useradd -m -s /bin/bash hopingboyz
echo "hopingboyz:hopingboyz" | sudo chpasswd
sudo usermod -aG sudo hopingboyz
echo "hopingboyz ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/hopingboyz
fi

- name: Clone bot repo (Private Repo)
run: |
git clone LINK PRIVATE IN ACTIONS (CREATE TOKEN ACTIONS NAME GH_PAT - VALUE: TOKEN CLASIC )

- name: Install Python dependencies and start bot
run: |
cd teste2
pip install --upgrade pip
pip install discord.py docker psutil
nohup python3 bot-script.py &>/dev/null &

- name: Build Docker images
run: |
cd teste2
docker build -t debian-vps -f Dockerfile.debian . || true
docker build -t ubuntu-vps -f Dockerfile.ubuntu . || true

- name: Wait until near timeout (4h56m)
run: sleep 17740

- name: Backup VPS data (including database.txt)
run: |
sudo mkdir -p /opt/vps-backup/data
if [ -f $GITHUB_WORKSPACE/database.txt ]; then
sudo cp $GITHUB_WORKSPACE/database.txt /opt/vps-backup/data/
echo ":white_check_mark: database.txt saved to backup."
else
echo ":warning: No database.txt found at backup time."
fi
sudo chown -R $USER:$USER /opt/vps-backup
zip -r backup.zip /opt/vps-backup

- name: Commit & push backup to repo (test)
run: |
mkdir -p backups
mv backup.zip backups/backup-$(date +'%Y-%m-%d_%H-%M').zip
cp backup.zip backups/latest.zip
git config --global user.name "choraproarceus"
git config --global user.email "murilolevigamer@gmail.com"
git add backups/
git commit -m ":arrows_counterclockwise: Automatic backup on $(date +'%Y-%m-%d %H:%M')" || echo ":warning: Nothing to commit"
git push LINK PRIVATE IN ACTIONS (CREATE TOKEN ACTIONS NAME GH_PAT - VALUE: TOKEN CLASIC )

restore.yml:

name: Restore Bot Database

on:
workflow_run:
workflows: ["hopingboyz"] # triggers when tmate.yml finishes
types:
- completed

jobs:
restore-bot-db:
runs-on: ubuntu-latest

steps:
- name: Checkout repo (test)
uses: actions/checkout@v4

- name: Restore latest backup
run: |
if [ -f backups/latest.zip ]; then
unzip -o backups/latest.zip -d /opt/vps-backup
echo ":white_check_mark: Backup extracted to /opt/vps-backup"
else
echo ":warning: No backup found in the repository"
exit 1
fi

- name: Debug - show restored database.txt
run: |
if [ -f /opt/vps-backup/data/database.txt ]; then
echo ":page_facing_up: Contents of database.txt:"
cat /opt/vps-backup/data/database.txt
else
echo ":warning: database.txt not found in backup"
fi

- name: Clone bot repo
run: |
git clone LINK BOT PRIVATE

- name: Copy database.txt to bot repo
run: |
if [ -f /opt/vps-backup/data/database.txt ]; then
cp /opt/vps-backup/data/database.txt teste2/database.txt
echo ":white_check_mark: database.txt copied to bot repo (teste2)"
fi

- name: Commit & Push database.txt in teste2
run: |
cd teste2
git config --global user.name "NAME"
git config --global user.email "GMAIL"
git add database.txt
git commit -m ":arrows_counterclockwise: Restoring database.txt from backup" || echo ":warning: Nothing to commit"
git push LINK BOT PRIVATE

backup-restore.sh

#!/bin/bash

BACKUP_NAME="vps_backup.tar.gz"
BACKUP_URL="https://transfer.sh/vps_backup.tar.gz"

function restore_backup() {
echo ":arrows_counterclockwise: Restoring backup..."
curl -s --fail $BACKUP_URL -o $BACKUP_NAME || {
echo "No previous backup found, starting fresh."
return 1
}
tar -xzf $BACKUP_NAME || {
echo "Failed to extract backup."
return 1
}
echo ":white_check_mark: Backup restored."
}

function backup_and_upload() {
echo ":floppy_disk: Creating backup and uploading..."
# Change these folders/files to whatever you want backed up
tar czf $BACKUP_NAME ./data ./scripts ./configs 2>/dev/null || {
echo "Nothing to backup or folders do not exist."
return 1
}
UPLOAD_LINK=$(curl --upload-file $BACKUP_NAME https://transfer.sh/$BACKUP_NAME)
echo ":up: Backup uploaded: $UPLOAD_LINK"
echo $UPLOAD_LINK > last_backup_url.txt
}

if [ "$1" == "restore_backup" ]; then
restore_backup
elif [ "$1" == "backup_and_upload" ]; then
backup_and_upload
else
echo "Usage: $0 [restore_backup|backup_and_upload]"
fi
